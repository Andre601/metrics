// TODO(@lowlighter): remove .legacy when migrated
// TODO(@lowlighter): I think SVGO breaks the lock as it depends on OS maybe ?
{
  "version": "4.0.0",
  "imports": {
    "std/": "https://deno.land/std@0.201.0/",
    "x/": "https://deno.land/x/",
    "y/": "https://esm.sh/",
    "gh/": "https://esm.sh/gh/",
    "@engine/": "./source/engine/",
    "@plugins/": "./source/plugins/",
    "@processors/": "./source/processors/"
  },
  "tasks": {
    "qq": "rm -rf .coverage && deno test --coverage=.coverage --no-check --unstable --trace-ops --allow-all source/engine/components && deno coverage .coverage --exclude='(secret|log|io|errors|testing|validation|format|version|config|browser).ts'",
    "q": "rm -rf .coverage && deno test --coverage=.coverage --unstable --trace-ops --fail-fast --allow-all source/metrics && deno coverage .coverage",
    "btr": "deno run --allow-env --allow-read --allow-write=.btr.json --allow-run=deno --no-lock tasks.ts $0"
  },
  "btr-tasks": {
    "cli": {
      "task": "deno run source/run/cli/mod.ts",
      "lock": false,
      "permissions": {
        "env": true,
        "read": true, /*[
          // Metrics
          "metrics.config.yml",
          "deno.jsonc",
          "source"
        ]*/
        "net": [
          "api.github.com"
        ]
      }
    },
    // Server mode ========================================================================
    "serve": {
      "task": "deno run source/run/server/mod.ts",
      "description": "üåê Run server",
      "unstable": true,
      "permissions": {
        "env": [
          // Metrics
          "METRICS_GITHUB_TOKEN",
          "METRICS_GITHUB_APP_SECRET",
          // Environment
          "DENO_DEPLOYMENT_ID",
          "DENO_AUTH_TOKENS",
          "DENO_DIR",
          // Cache
          "USERPROFILE",
          "LOCALAPPDATA"
        ],
        "read": [
          // Metrics
          "metrics.config.yml",
          // Environment
          "deno.jsonc",
          "$CWD",
          // KV store
          ".kv",
          ".kv-shm",
          ".kv-wal",
          // Cache
          "$LOCALAPPDATA/deno-wasmbuild",
          "$USERPROFILE/.astral"
        ],
        "run": true,
        "write": [
          // KV store
          ".kv",
          ".kv-shm",
          ".kv-wal"
        ],
        "net": [
          // Server bindings
          "localhost",
          // GitHub API
          "api.github.com",
          // Github OAuth
          "github.com/login/oauth",
          // plugins/rss
          "news.ycombinator.com/rss"
        ]
      }
    },
    // Testing ==============================================================================
    "test": {
      "task": [
        "rm .coverage -rf",
        "deno test source/metrics"
      ],
      "description": "üß™ Run tests and collect coverage",
      "seed": 0,
      "doc": true,
      "traceOps": true,
      //"parallel": true,
      "coverage": ".coverage",
      "failFast": 1,
      "lock": false,
      "unstable": true,
      "permissions": {
        "all": true
        /* "env": [
          // Metrics
          "METRICS_GITHUB_TOKEN",
          "METRICS_GITHUB_APP_SECRET",
          // Environment
          "DENO_DEPLOYMENT_ID",
          "CHROME_BIN",
          "IS_DOCKER",
          // Cache
          "CWD",
          "USERPROFILE",
          "CACHE_DIR",
          "HOME"
        ],
        "read": [
          // Environment
          "deno.jsonc",
          "$CWD",
          // Cache
          "$USERPROFILE/.astral",
          "$HOME/.astral"
        ],
        "write": [
          // Cache
          "$USERPROFILE/.astral",
          "$HOME/.astral",
          // Tests
          "$CWD/.test",
          // Puppeteer
          "$HOME/.config/chromium/SingletonLock"
        ],
        "run": [
          // Cache
          "$USERPROFILE/.astral/**\/chrome.exe",
          "$HOME/.astral/**\/chrome",
          // Puppeteer
          "/usr/bin/chromium-browser"
        ],
        "net": [
          // Server bindings
          "localhost",
          // Packages
          "esm.sh",
          "deno.land/x",
          "deno.land/std",
          // Browser downloads
          "googlechromelabs.github.io/chrome-for-testing",
          "edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing",
          // processors/render.gemojis
          "api.github.com/emojis",
          // processors/render.twemojis
          "cdn.jsdelivr.net/gh/jdecked/twemoji@latest/assets"
        ]*/
      }
    },
    "test:cache": {
      "task": "deno test source",
      "description": "üß™ Cache tests",
      "lock": false,
      "reload": true,
      "run": false
    },
    // Miscelleanous tasks ================================================================
    "cache": {
      "task": [
        "deno task btr test:cache"
      ],
      "description": "üì¶ Cache dependencies"
    },
    "check": {
      "task": [
        "deno lint",
        "deno fmt"
      ],
      "description": "üîé Lint and format code"
    },
    "coverage": {
      "task": "deno coverage .coverage",
      "description": "üî¨ Print coverage report (require `test` task to be run first)"
    },
    // Continuous integration tasks =======================================================
    "ci:check": {
      "task": [
        "deno lint",
        "deno fmt --check"
      ],
      "description": "ü§ñ Lint and format code (CI)",
      "lock": false
    },
    "ci:test": {
      "task": [
        "deno task btr docker:build",
        "docker run metrics:dev sh -c 'deno task btr test && deno task btr coverage'"
      ],
      "description": "ü§ñ Build container and run tests and coverage inside the image (CI)",
      "lock": false
    },
    // Deployment tasks ===================================================================
    "deploy:deno": {
      "task": [
        "deno run source/run/server/mod_imports.ts",
        "deployctl deploy --project=metrics --include=source,deno.jsonc --prod source/run/server/mod.ts"
      ],
      "description": "ü¶ï Deploy metrics on https://deno.com/deploy",
      "lock": false,
      "env": {
        "DENO_DEPLOY_TOKEN": true
      },
      "permissions": {
        "env": [
          // Environment
          "DENO_DIR",
          "DENO_AUTH_TOKENS",
          // Cache
          "LOCALAPPDATA"
        ],
        "read": [
          // Environment
          "$CWD",
          // Cache
          "$LOCALAPPDATA/deno-wasmbuild",
          "$LOCALAPPDATA/deno/deps"
        ],
        "write": [
          // Write imports
          "source/run/server",
          "source/run/server/imports.ts"
        ],
        "net": [
          // Packages
          "esm.sh"
        ]
      }
    },
    // Docker tasks =======================================================================
    "docker:build": {
      "task": "docker build --tag metrics:dev .",
      "description": "üêã Build docker image",
      "lock": false
    }
  },
  // Linting options
  "lint": {
    "rules": {
      "include": [
        "ban-untagged-todo",
        "default-param-last",
        "eqeqeq",
        "no-const-assign",
        "no-eval",
        "no-sparse-arrays",
        "no-sync-fn-in-async-fn",
        "no-throw-literal"
      ]
    },
    "exclude": ["source/run/server/static/app.js", ".legacy"]
  },
  // Formatting options
  "fmt": {
    "lineWidth": 200,
    "semiColons": false,
    "exclude": ["CODE_OF_CONDUCT.md", ".coverage", ".btr.json", "source/run/server/static/app.js", ".legacy"]
  },
  // TypeScript options
  "compilerOptions": {
    "lib": [
      "deno.ns",
      "deno.unstable",
      "dom",
      "dom.asynciterable",
      "dom.iterable"
    ]
  },
  "deno.enable": true
}
